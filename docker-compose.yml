version: '3.8'

services:
  # Frontend (Development with hot reload)
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: seriesoftubes-frontend-dev
    ports:
      - "${FRONTEND_PORT:-3000}:3000"  # Vite configured to run on 3000
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Prevent overwriting node_modules
    environment:
      - VITE_API_URL=http://localhost:${API_PORT:-8000}
      - VITE_API_PROXY_URL=http://api-dev:8000
    profiles: ["dev"]  # Only starts with --profile dev
    depends_on:
      - api-dev
    restart: unless-stopped

  # Frontend (Production build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: seriesoftubes-frontend
    ports:
      - "80:80"
    depends_on:
      - api
    profiles: ["prod"]  # Only starts with --profile prod
    restart: unless-stopped

  # API Server (Production mode - no hot reload)
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: seriesoftubes-api
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://seriesoftubes:development-password@postgres:5432/seriesoftubes
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-development-secret-key-change-in-production}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173,http://localhost}
    volumes:
      - ./logs:/app/logs
      - ./workflows:/app/workflows:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 3s
      retries: 5
    profiles: ["with-api"]  # Only starts with --profile with-api

  # API Server (Development mode with hot reload)
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: seriesoftubes-api-dev
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://seriesoftubes:development-password@postgres:5432/seriesoftubes
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-development-secret-key-change-in-production}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173,http://localhost}
    volumes:
      - ./src:/app/src  # Mount only source code for hot reload
      - ./tests:/app/tests  # Mount tests
      - ./workflows:/app/workflows  # Mount example workflows
      - ./logs:/app/logs
      - ./.env:/app/.env:ro  # Mount env file if exists
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 3s
      retries: 5
    profiles: ["dev"]  # Only starts with --profile dev

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: seriesoftubes-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # PostgreSQL for production-like development
  postgres:
    image: postgres:16-alpine
    container_name: seriesoftubes-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: seriesoftubes
      POSTGRES_PASSWORD: development-password
      POSTGRES_DB: seriesoftubes
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U seriesoftubes"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Optional: Worker for background jobs (uncomment if needed)
  # worker:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.worker
  #   container_name: seriesoftubes-worker
  #   environment:
  #     - DATABASE_URL=postgresql://seriesoftubes:development-password@postgres:5432/seriesoftubes
  #     - REDIS_URL=redis://redis:6379
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #     - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
  #   volumes:
  #     - ./workflows:/app/workflows
  #     - ./outputs:/app/outputs
  #   depends_on:
  #     - postgres
  #     - redis
  #   restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  api-dev-cache: